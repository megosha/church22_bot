from datetime import datetime
import logging
from pathlib import Path

import telebot
import settings
import models
import constants

# TODO ddos check
# TODO edit message
# TODO refactor send message to manager and admin to one method

import service

BASE_DIR = Path(__file__).resolve().parent
logfile = str(BASE_DIR / 'logs' / 'main.log')
# logging.basicConfig(filename=logfile, filemode='a', level=logging.DEBUG)
logging.basicConfig(filename=logfile, filemode='a')

bot = telebot.TeleBot(settings.BOT_TOKEN)


def get_name(message, error=False):
    if error:
        msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)"
    else:
        msg = "üì® –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? üôÇ\n(–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) üëáüëáüëá"
    first_dialog = bot.send_message(message.chat.id, msg)
    bot.register_next_step_handler(first_dialog, create_user)


def create_user(message):
    if message.content_type == 'text':
        users = models.RDB()
        chat_id = message.chat.id
        tm_id = message.from_user.id
        name = message.text.strip()
        m_id = message.id
        if service.name_is_valid(name):
            body = users.init_item(chat_id, tm_id, name, m_id)
            users.set_item(chat_id, body)
            bot.send_message(message.chat.id, f"‚ùì {name}, —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –í—ã –≤–µ—Ä—É—é—â–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?",
                             reply_markup=service.render_keyboard(constants.STATUS))
        else:
            get_name(message, True)
    else:
        send_welcome(message)


def get_trouble(message, action):
    users = models.RDB()

    reserved_contact = users.get_item_value(message.chat.id, "contact")
    manager_chat = settings.get_env_value(action)

    msg = f'–ó–∞—è–≤–∫–∞ ‚Ññ: "{message.chat.id}_{message.id}"\n ' \
          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n' \
          f'–ò–º—è: {users.get_item_value(message.chat.id, "name")}\n' \
          f'–°—Ç–∞—Ç—É—Å (–≤–µ—Ä—É—é—â–∏–π/–Ω–µ–≤–µ—Ä—É—é—â–∏–π): {constants.STATUS.get(users.get_item_value(message.chat.id, "status"))}\n' \
          f'–î–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç: {reserved_contact}\n' \
          f'–¢–µ–º–∞: {settings.ACTIONS[action]}\n' \
          f'–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}'
    msg_log = msg.replace("\n", " - ")
    logging.warning(f'{datetime.now} - in get_trouble - MANAGER - {manager_chat} DATA - {msg_log}')

    bot.forward_message(manager_chat, message.chat.id, message_id=message.id)

    if not reserved_contact:
        k_wargs = {"reply_markup": service.render_keyboard(
            {f'private_{message.chat.id}': "–°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (‚ö†Ô∏è–ù–∞–∂–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)"}
        )}
    else:
        k_wargs = {}

    bot.send_message(manager_chat, msg, **k_wargs)

    bot.reply_to(message,
                 f'{users.get_item_value(message.chat.id, "name")}, –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. '
                 f'–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üï∞ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üå∑',
                 reply_markup=service.returntomainmenu_keyboard())

    users.change_item(message.chat.id, "request", "1")
    users.change_item(message.chat.id, "last_message_id", f"{message.id}")
    users.change_item(message.chat.id, "last_message", message.text)
    users.change_item(message.chat.id, "last_message_date", f"{datetime.now()}")
    users.change_item(message.chat.id, "action_type", f"{settings.ACTIONS[action]}")
    logging.warning(f'{datetime.now} - USER DATA AFTER GET TROUBLE - {users.get_object(message.chat.id)}')


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    logging.warning(f'{datetime.now} - in query_handler/ Clicked Button - {call.data}')
    try:
        bot.answer_callback_query(callback_query_id=call.id)
        if call.data == 'contact':
            chat_id = call.message.chat.id
            answer = f'–°–∞–π—Ç: {settings.get_env_value("website")}\n–ê–¥—Ä–µ—Å: –ø—Ä. –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π, 80, –æ—Ñ–∏—Å 304\n'
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
            bot.send_message(call.message.chat.id, answer,
                             reply_markup=service.returntomainmenu_keyboard(show_website=True))
        elif call.data in settings.ACTIONS.keys():
            chat_id = call.message.chat.id
            answer = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É:"{settings.ACTIONS[call.data]}"\n\nüì® –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ –û–î–ù–ò–ú —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëáüëáüëá'
            sent = bot.send_message(chat_id, answer)
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id,
                                          reply_markup=service.returntomainmenu_keyboard())
            bot.clear_step_handler(call.message)
            bot.register_next_step_handler(sent, get_trouble, action=call.data)
        elif call.data == 'menu':
            chat_id = call.message.chat.id
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è',
                             reply_markup=service.render_keyboard(settings.ACTIONS, True))
        elif call.data in constants.STATUS.keys():
            chat_id = call.message.chat.id
            users = models.RDB()
            users.change_item(chat_id, "status", str(call.data))

            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
            bot.send_message(chat_id,
                             f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {users.get_item_value(chat_id, "name")}! üòâ'
                             f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∏ –≤—Ä–µ–º—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å üôè\n\n'
                             f'‚ùì–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –í–∞—à –≤–æ–ø—Ä–æ—Å? üëá\n(–í—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –í–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã üî•)',
                             reply_markup=service.render_keyboard(settings.ACTIONS, True))

        elif call.data == 'ignored':
            message = call.message
            chat_id = message.chat.id

            users = models.RDB()
            reserved_contact = users.get_item_value(message.chat.id, "contact")

            users.change_item(chat_id, "request", "3")

            if not reserved_contact:
                k_wargs = {"reply_markup": service.render_keyboard({f'private_{chat_id}': "–°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"})}
            else:
                k_wargs = {}
            bot.send_message(settings.get_env_value('admin'),
                             f'‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ü–û–õ–£–ß–ò–õ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ!\n'
                             f'–ó–∞—è–≤–∫–∞ ‚Ññ: {chat_id}_{users.get_item_value(chat_id, "last_message_id")}"\n'
                             f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{users.get_item_value(chat_id, "username")}\n'
                             f'–ò–º—è: {users.get_item_value(chat_id, "name")}\n'
                             f'–°—Ç–∞—Ç—É—Å (–≤–µ—Ä—É—é—â–∏–π/–Ω–µ–≤–µ—Ä—É—é—â–∏–π): {constants.STATUS.get(users.get_item_value(chat_id, "status"))}\n'
                             f'–î–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç: {reserved_contact}\n'
                             f'–¢–µ–º–∞: {users.get_item_value(chat_id, "action_type")}\n'
                             f'–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {users.get_item_value(chat_id, "last_message_date")}\n'
                             f'–°–æ–æ–±—â–µ–Ω–∏–µ: {users.get_item_value(chat_id, "last_message")}', **k_wargs)
            bot.forward_message(settings.get_env_value("admin"), chat_id,
                                message_id=users.get_item_value(chat_id, "last_message_id"))

            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
            answer = '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ üòîüå∑'
            bot.send_message(chat_id, answer, reply_markup=service.returntomainmenu_keyboard(show_website=True))
            logging.warning(f'{datetime.now} - Ignored Button - processed')

        elif call.data == 'answered':
            chat_id = call.message.chat.id
            users = models.RDB()
            users.change_item(chat_id, "request", "2")
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
            answer = ('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞–º –≤ –í–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏! üôè'
                      '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –í–∞–º –ø–æ–º–æ—á—å! üíí\n\n'
                      '–ü—É—Å—Ç—å –ì–æ—Å–ø–æ–¥—å –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç –í–∞—Å!')
            bot.send_message(chat_id, answer, reply_markup=service.returntomainmenu_keyboard(show_website=True))
            logging.warning(f'{datetime.now} - Answered Button - processed')
        elif call.data.startswith('private_'):
            btn_id = call.data
            manager_chat = call.message.chat.id
            chat_id = btn_id[btn_id.rfind('_') + 1:]
            get_contact = bot.send_message(
                chat_id,
                f'‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ telegram –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. \n\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –æ—Ç–≤–µ—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º '
                f'–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email –¥–ª—è —Å–≤—è–∑–∏. üëáüëáüëá',
            )
            bot.register_next_step_handler(get_contact, additional_contact, manager_chat=manager_chat)
            bot.edit_message_reply_markup(chat_id=manager_chat, message_id=call.message.id, reply_markup=None)
        else:
            pass
    except Exception as err:
        logging.error(f'{datetime.now()} - {service._get_detail_exception_info(err)}')


def additional_contact(message, manager_chat):
    bot.forward_message(manager_chat, message.chat.id, message_id=message.id)
    contact = message.text
    users = models.RDB()
    users.change_item(message.chat.id, "contact", contact)
    bot.reply_to(message,
                 f'–°–ø–∞—Å–∏–±–æ, {users.get_item_value(message.chat.id, "name")}! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–µ—Ä–µ–¥–∞–Ω, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è üì≤',
                 reply_markup=service.returntomainmenu_keyboard())


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    logging.warning(f'{datetime.now} - clicked start Button')

    if message.from_user.is_bot:
        return
    # bot.reply_to(message, greeting_message(), reply_markup=standart_keyboard())
    bot.reply_to(message, service.greeting_message())
    img = open(BASE_DIR / 'static' / 'church22.jpg', 'rb')
    # img = open('static' / 'church22.jpg', 'rb')
    bot.send_photo(message.chat.id, img)
    if not models.RDB().get_item_value(message.chat.id, 'name'):
        get_name(message)
    else:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è',
                         reply_markup=service.render_keyboard(settings.ACTIONS, True))


from threading import Thread
from time import sleep


def feedback_checker():
    sleep_time = 1000
    logging.warning(f'{datetime.now()} - start feedback_checker')
    while True:
        logging.warning(f'{datetime.now()} - start feedback_checker cycle')
        for chat_id in models.db.scan_iter('*'):
            users = models.RDB()
            # obj = users.get_object(chat_id)
            request_status = users.get_item_value(chat_id, 'request')
            last_message_date = users.get_item_value(chat_id, 'last_message_date')
            name = users.get_item_value(chat_id, 'name')

            if request_status == '1' and last_message_date:
                dt_format = '%Y-%m-%d %H:%M:%S.%f'
                dt = datetime.strptime(last_message_date, dt_format)
                if abs(datetime.now() - dt).days >= 1:
                    # if abs(datetime.now() - dt).days < 1:
                    bot.send_message(chat_id.decode(), f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! '
                                                       f'–ù–µ–¥–∞–≤–Ω–æ –í—ã –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n'
                                                       f'–° –í–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å –ø–æ –í–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é? (–≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá)',
                                     reply_markup=service.render_keyboard(constants.FEEDBACK))
                    users.change_item(chat_id.decode(), "request", "4")
                    logging.warning(
                        f'{datetime.now()} - asking for feedback - USER_ID {users.get_item_value(chat_id, "tm_id")} - '
                        f'CHAT_ID - {chat_id.decode()}')
        logging.warning(
            f'{datetime.now()} - sleep for {sleep_time} seconds')
        sleep(sleep_time)


if __name__ == '__main__':
    logging.warning(f'{datetime.now()} - starting THREAD')
    Thread(target=feedback_checker).start()
    logging.warning(f'{datetime.now()} - starting BOT')
    bot.polling(none_stop=True)
    # bot.polling()
