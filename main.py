from datetime import datetime

import telebot
import settings
import models
import constants

# TODO ddos check
# TODO edit message
import service

bot = telebot.TeleBot(settings.BOT_TOKEN)


def get_name(message, error=False):
    if error:
        msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)"
    else:
        msg = "üì® –ß—Ç–æ–±—ã –º—ã –ø–æ–Ω–∏–º–∞–ª–∏, –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ üëáüëáüëá"
    first_dialog = bot.send_message(message.chat.id, msg)
    bot.register_next_step_handler(first_dialog, create_user)


def create_user(message):
    if message.content_type == 'text':
        users = models.RDB()
        chat_id = message.chat.id
        tm_id = message.from_user.id
        name = message.text.strip()
        m_id = message.id
        if service.name_is_valid(name):
            body = users.init_item(chat_id, tm_id, name, m_id)
            users.set_item(chat_id, body)
            bot.send_message(message.chat.id, f"‚ùì {name}, —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –í—ã –≤–µ—Ä—É—é—â–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?",
                             reply_markup=service.render_keyboard(constants.STATUS))
        else:
            get_name(message, True)
    else:
        send_welcome(message)


def get_trouble(message, action):
    users = models.RDB()
    bot.send_message(message.chat.id,
                     f'{users.get_item_value(message.chat.id, "name")}, –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –° –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!üïê –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!',
                     reply_markup=service.returntomainmenu_keyboard())
    bot.forward_message(settings.get_env_value(action), message.chat.id, message_id=message.id)
    bot.send_message(settings.get_env_value(action),
                     f'–ó–∞—è–≤–∫–∞ ‚Ññ: f"{message.chat.id}{message.id}"\n'
                     f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
                     f'–ò–º—è: {users.get_item_value(message.chat.id, "name")}\n'
                     f'–°—Ç–∞—Ç—É—Å (–≤–µ—Ä—É—é—â–∏–π/–Ω–µ–≤–µ—Ä—É—é—â–∏–π): {constants.STATUS.get(users.get_item_value(message.chat.id, "status"))}\n'
                     f'–¢–µ–º–∞: {settings.ACTIONS[action]}\n'
                     f'–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}')
    users.change_item(message.chat.id, "request", "1")
    users.change_item(message.chat.id, "last_message_id", f"{message.id}")
    users.change_item(message.chat.id, "last_message", message.text)
    users.change_item(message.chat.id, "last_message_date", f"{datetime.now()}")
    users.change_item(message.chat.id, "action_type", f"{settings.ACTIONS[action]}")


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)
    # answer = ''
    if call.data == 'contact':
        answer = f'–°–∞–π—Ç: {settings.get_env_value("website")}\n–ê–¥—Ä–µ—Å: –ø—Ä. –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π, 80, –æ—Ñ–∏—Å 304\n'
        bot.send_message(call.message.chat.id, answer,
                         reply_markup=service.returntomainmenu_keyboard(show_website=True))
    elif call.data in settings.ACTIONS.keys():
        answer = 'üì® –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –≤ –æ—Ç–≤–µ—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. üëá'
        sent = bot.send_message(call.message.chat.id, answer)
        bot.register_next_step_handler(sent, get_trouble, action=call.data)
    elif call.data == 'menu':
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è',
                         reply_markup=service.render_keyboard(settings.ACTIONS, True))
    elif call.data in constants.STATUS.keys():
        chat_id = call.message.chat.id
        users = models.RDB()
        users.change_item(chat_id, "status", str(call.data))

        bot.send_message(chat_id,
                         f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {users.get_item_value(chat_id, "name")}! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∏ –≤—Ä–µ–º—è –∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã! üôè\n\n'
                         f'–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üëá\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã üî• ',
                         reply_markup=service.render_keyboard(settings.ACTIONS, True))
    elif call.data == 'ignored':
        message = call.message
        chat_id = message.chat.id
        users = models.RDB()
        users.change_item(chat_id, "request", "3")
        bot.send_message(settings.get_env_value('admin'),
                         f'‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ü–û–õ–£–ß–ò–õ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ!\n'
                         f'–ó–∞—è–≤–∫–∞ ‚Ññ: {chat_id}{users.get_item_value(chat_id, "last_message_id")}"\n'
                         f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{users.get_item_value(chat_id, "username")}\n'
                         f'–ò–º—è: {users.get_item_value(chat_id, "name")}\n'
                         f'–°—Ç–∞—Ç—É—Å (–≤–µ—Ä—É—é—â–∏–π/–Ω–µ–≤–µ—Ä—É—é—â–∏–π): {constants.STATUS.get(users.get_item_value(chat_id, "status"))}\n'
                         f'–¢–µ–º–∞: {users.get_item_value(chat_id, "action_type")}\n'
                         f'–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {users.get_item_value(chat_id, "last_message_date")}\n'
                         f'–°–æ–æ–±—â–µ–Ω–∏–µ: {users.get_item_value(chat_id, "last_message")}')
        bot.forward_message(settings.get_env_value("admin"), chat_id,
                            message_id=users.get_item_value(chat_id, "last_message_id"))
        answer = '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'
        bot.send_message(chat_id, answer, reply_markup=service.returntomainmenu_keyboard(show_website=True))
    elif call.data == 'answered':
        chat_id = call.message.chat.id
        users = models.RDB()
        users.change_item(chat_id, "request", "2")
        answer = '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞–º –≤ –í–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏! ' \
                 '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –í–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å!\n\n –ü—É—Å—Ç—å –ì–æ—Å–ø–æ–¥—å –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç –í–∞—Å!'
        bot.send_message(chat_id, answer, reply_markup=service.returntomainmenu_keyboard(show_website=True))
    else:
        pass


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if message.from_user.is_bot:
        return
    # bot.reply_to(message, greeting_message(), reply_markup=standart_keyboard())
    bot.reply_to(message, service.greeting_message())
    from pathlib import Path
    BASE_DIR = Path(__file__).resolve().parent
    img = open(BASE_DIR / 'static' / 'church22.jpg', 'rb')
    # img = open('static' / 'church22.jpg', 'rb')
    bot.send_photo(message.chat.id, img)
    if not models.RDB().get_item_value(message.chat.id, 'name'):
        get_name(message)
    else:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è',
                         reply_markup=service.render_keyboard(settings.ACTIONS, True))


from threading import Thread
from time import sleep


def feedback_checker():
    while True:
        for chat_id in models.db.scan_iter('*'):
            users = models.RDB()
            # print(chat_id)
            # print(type(chat_id))
            obj = users.get_object(chat_id)
            request_status = users.get_item_value(chat_id, 'request')
            last_message_date = users.get_item_value(chat_id, 'last_message_date')
            name = users.get_item_value(chat_id, 'name')

            if request_status == '1' and last_message_date:
                dt_format = '%Y-%m-%d %H:%M:%S.%f'
                dt = datetime.strptime(last_message_date, dt_format)
                if abs(datetime.now() - dt).days >= 1:
                    bot.send_message(chat_id.decode(), f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! '
                                              f'–ù–µ–¥–∞–≤–Ω–æ –í—ã –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n'
                                              f'–° –í–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å –ø–æ –í–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é? (–≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá)',
                                     reply_markup=service.render_keyboard(constants.FEEDBACK))
                    users.change_item(chat_id.decode(), "request", "4")

        sleep(1000)


if __name__ == '__main__':
    # bot.polling(none_stop=True)
    Thread(target=feedback_checker).start()
    bot.polling()
